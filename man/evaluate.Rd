% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matching_model.R
\name{evaluate}
\alias{evaluate}
\alias{evaluate,neer_match.matching_model.DLMatchingModel-method}
\alias{evaluate,neer_match.matching_model.NSMatchingModel-method}
\title{Model Evaluation}
\usage{
evaluate(object, left, right, matches, ...)

\S4method{evaluate}{neer_match.matching_model.DLMatchingModel}(object, left, right, matches, ...)

\S4method{evaluate}{neer_match.matching_model.NSMatchingModel}(
  object,
  left,
  right,
  matches,
  batch_size = 32L,
  satisfiability_weight = 1
)
}
\arguments{
\item{object}{A matching model object.}

\item{left}{A data frame with the left records.}

\item{right}{A data frame with the right records.}

\item{matches}{A data frame with the indices of the matching record pairs.}

\item{...}{Additional arguments passed to
\href{https://www.tensorflow.org/api_docs/python/tf/keras/Model#evaluate}{
tf.keras.evaluate}.}

\item{batch_size}{The batch size (integer).}

\item{satisfiability_weight}{A numeric value in the range \eqn{[0, 1]}
representing the weight of the satisfiability loss in the total loss of a
hybrid model.}
}
\value{
Called for side effects (model evaluation).
}
\description{
Evaluates the model. Calculates and returns the loss and various accuracy
metrics for a fitted model and the passed data.

The method emulates the behavior of the
\href{https://www.tensorflow.org/api_docs/python/tf/keras/Model#evaluate}{
tf.keras.evaluate} method. It automatically constructs a data generator
from the left and right datasets iterating over all the elements of their
Cartesian product. The generator's labels are generated from the matches
data frame. The method uses the generator to evaluate the model.

\subsection{\code{\link{DLMatchingModel}}}{
The method passes the constructed generator and any
additional call arguments to
directly to the
\href{https://www.tensorflow.org/api_docs/python/tf/keras/Model#evaluate}{
tf.keras.evaluate}.
}

\subsection{\code{\link{NSMatchingModel}}}{
The method iterates over the batches of the constructed generator and
calculates the numbers of true positives, true negatives, false positives,
and false negatives. In addition, it calculates accuracy, precision, recall,
and F1 score. The method returns a named list with the calculated metrics.
}
}
\examples{
smap <- SimilarityMap(
  instructions = list(
    `reviews` = list("discrete", "gaussian"),
    `developer ~ dev` = list("jaro_winkler", "damerau_levenshtein")
  )
)
model <- DLMatchingModel(smap)
compile(model, loss = tensorflow::tf$keras$losses$BinaryCrossentropy())

matching_data <- fuzzy_games_example_data()

eval_set <- c(1:3)
train_left <- matching_data$left[-eval_set, ]
train_right <- matching_data$right[-eval_set, ]
train_matches <- matching_data$matches[
  !(matching_data$matches$left \%in\% eval_set) |
    !(matching_data$matches$right \%in\% eval_set),
] - 3L
fit(
  model,
  train_left, train_right, train_matches,
  epochs = 1L,
  verbose = 0L
)

eval_left <- matching_data$left[eval_set, ]
eval_right <- matching_data$right[eval_set, ]
eval_matches <- matching_data$matches[
  (matching_data$matches$left \%in\% eval_set) &
    (matching_data$matches$right \%in\% eval_set),
]
print(evaluate(model, eval_left, eval_right, eval_matches))
}
