% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matching_model.R
\name{suggest}
\alias{suggest}
\alias{suggest,neer_match.matching_model.DLMatchingModel-method}
\alias{suggest,neer_match.matching_model.NSMatchingModel-method}
\title{Model Suggestions}
\usage{
suggest(object, left, right, count, ...)

\S4method{suggest}{neer_match.matching_model.DLMatchingModel}(object, left, right, count, ...)

\S4method{suggest}{neer_match.matching_model.NSMatchingModel}(object, left, right, count, batch_size = 32L, ...)
}
\arguments{
\item{object}{A matching model object.}

\item{left}{A data frame with the left records.}

\item{right}{A data frame with the right records.}

\item{count}{The number of returned suggestions from the right dataset
for each record in the left dataset.}

\item{...}{Additional arguments passed to the
\code{\link[=predict.neer_match.matching_model.NSMatchingModel]{predict}}
method.}

\item{batch_size}{The batch size (integer).}
}
\value{
A data frame with the most similar records.
}
\description{
Suggests the most similar records. It automatically constructs a data
generator from the left and right datasets iterating over all the elements
of their Cartesian product. The method calls the
\code{\link[=predict.neer_match.matching_model.NSMatchingModel]{predict}}
method of the passed model using the constructed generator. For each record
in the left dataset of, the function returns \code{count} records from the
right dataset having the greatest matching predictions.
}
\examples{
smap <- SimilarityMap(
  instructions = list(
    `score` = list("gaussian", "euclidean"),
    `platform` = list("osa", "indel")
  )
)
model <- NSMatchingModel(smap)
compile(model)
matching_data <- fuzzy_games_example_data()
fit(
  model,
  matching_data$left, matching_data$right, matching_data$matches,
  epochs = 1L,
  verbose = 0L
)
suggest(
  model, matching_data$left[1:2, ], matching_data$right[1:2, ],
  count = 2L
)
}
