% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matching_model.R, R/reasoning.R
\name{compile}
\alias{compile}
\alias{compile,neer_match.matching_model.DLMatchingModel-method}
\alias{compile,neer_match.matching_model.NSMatchingModel-method}
\alias{compile,neer_match.reasoning.RefutationModel-method}
\title{Model Compilation}
\usage{
compile(object, ...)

\S4method{compile}{neer_match.matching_model.DLMatchingModel}(object, ...)

\S4method{compile}{neer_match.matching_model.NSMatchingModel}(object, optimizer = tensorflow::tf$keras$optimizers$Adam())

\S4method{compile}{neer_match.reasoning.RefutationModel}(object, optimizer = tensorflow::tf$keras$optimizers$Adam())
}
\arguments{
\item{object}{A matching model object.}

\item{...}{Additional arguments passed to
\href{https://www.tensorflow.org/api_docs/python/tf/keras/Model#compile}{
tf.keras.compile}.}

\item{optimizer}{A
\href{https://www.tensorflow.org/api_docs/python/tf/keras/optimizers}{
tf.keras.optimizers} optimizer object.}
}
\value{
Called for side effects.
}
\description{
Compiles the model. The method prepares a neural network for estimation by
setting the optimizer, loss function, and other parameters as needed.

\subsection{\code{\link{DLMatchingModel}}}{
The method calls the
\href{https://www.tensorflow.org/api_docs/python/tf/keras/Model#compile}{
tf.keras.compile} method of the \code{tf.keras.Model} class.
}

\subsection{\code{\link{NSMatchingModel}}}{
Neural symbolic models are fitted using a custom training loop. The method
sets the optimizer for model training. The loss (for hybrid neural-symbolic and
deep learning models) is set to binary cross-entropy (
\href{https://www.tensorflow.org/api_docs/python/tf/keras/losses/BinaryCrossentropy}{
tf.keras.losses.BinaryCrossentropy})
}

\subsection{\code{\link{RefutationModel}}}{
Refutation models, similar to neural-symbolic models (\code{NSMatchingModel}),
are fitted using a custom. The method sets the optimizer for model training.
}
}
\examples{
smap <- SimilarityMap(
  instructions = list(
    `movie ~film` = list("jaro_winkler", "damerau_levenshtein"),
    `studio` = list("jaccard", "levenshtein"),
    `reviews~score` = list("euclidean")
  )
)
model <- DLMatchingModel(smap)
compile(model, optimizer = tensorflow::tf$keras$optimizers$Adam())
}
