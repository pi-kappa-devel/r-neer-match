% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matching_model.R
\name{predict.neer_match.matching_model.DLMatchingModel}
\alias{predict.neer_match.matching_model.DLMatchingModel}
\alias{predict.neer_match.matching_model.NSMatchingModel}
\title{Model Predictions}
\usage{
\method{predict}{neer_match.matching_model.DLMatchingModel}(object, left, right, ...)

\method{predict}{neer_match.matching_model.NSMatchingModel}(object, left, right, batch_size = 32L, ...)
}
\arguments{
\item{object}{A matching model object.}

\item{left}{A data frame with the left records.}

\item{right}{A data frame with the right records.}

\item{...}{Additional arguments passed to the
\href{https://www.tensorflow.org/api_docs/python/tf/keras/Model#predict}{
tf.keras.predict} method.}

\item{batch_size}{The batch size (integer).}
}
\value{
The model predictions.
}
\description{
\subsection{\code{\link{DLMatchingModel}}}{
Extracts model predictions. The method calls the
\href{https://www.tensorflow.org/api_docs/python/tf/keras/Model#predict}{
tf.keras.predict} method of the. It automatically constructs a data generator
from the left and right datasets iterating over all the elements of their
Cartesian product.
}

\subsection{\code{\link{NSMatchingModel}}}{
Extracts model predictions. It automatically constructs a data generator
from the left and right datasets iterating over all the elements of their
Cartesian product. The predictions are calculated using a custom loop
over the batches of the generator.
}
}
\examples{
smap <- SimilarityMap(
  instructions = list(
    `score` = list("gaussian", "euclidean"),
    `platform` = list("osa", "indel")
  )
)
model <- DLMatchingModel(smap)
compile(model, loss = tensorflow::tf$keras$losses$BinaryCrossentropy())
matching_data <- fuzzy_games_example_data()
fit(
  model,
  matching_data$left, matching_data$right, matching_data$matches,
  epochs = 1L,
  verbose = 0L
)
predict(model, matching_data$left[1:2, ], matching_data$right[1:2, ])
}
